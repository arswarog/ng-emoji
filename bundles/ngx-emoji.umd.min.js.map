{
  "version": 3,
  "file": "ngx-emoji.umd.min.js",
  "sources": [
    "ng://ngx-emoji/src/main/ngx-html.converter.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.service.ts",
    "ng://ngx-emoji/src/main/ngx-emoji-picker.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.module.ts"
  ],
  "sourcesContent": [
    "export class NgxHtmlConverter {\n\n    public fromHtml(html: string): string {\n        let text = html.replace('<br>', '\\n');\n        return text;\n    }\n\n    public toHtml(text: string): string {\n        let html = text.replace('\\n', '<br>');\n        return html;\n    }\n\n    public filterHtml(text: string): string {\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = text;\n        text = tmp.textContent || tmp.innerText || \"\";\n        return text;\n    }\n\n}\n",
    "import { Component, ElementRef, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxHtmlConverter } from \"./ngx-html.converter\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nexport interface EnterOn {\n    shift?: boolean;\n    ctrl?: boolean;\n}\n\nexport interface SelectionRange {\n    start: number;\n    stop: number;\n}\n\n@Component({\n    selector: 'ngx-emoji',\n    template: ''\n})\nexport class NgxEmojiComponent {\n    private contenteditable: boolean = false;\n    private enterOn: EnterOn = {\n        shift: false,\n        ctrl: false\n    };\n    protected readonly htmlConverter = new NgxHtmlConverter();\n    protected emojiService: NgxEmojiService;\n    protected globalEmojiServiceSubscription: Subscription;\n    protected lastSelectionRange: SelectionRange = {\n        start: 0,\n        stop: 0\n    };\n\n    public constructor(\n        protected elRef: ElementRef,\n        globalEmojiService: NgxEmojiService\n    ) {\n        let component = this;\n        globalEmojiService.setActiveComponent(this);\n        this.emojiService = globalEmojiService;\n        this.globalEmojiServiceSubscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    public addEmojiService(service: NgxEmojiService): void {\n        if (this.globalEmojiServiceSubscription) {\n            this.globalEmojiServiceSubscription.unsubscribe();\n        }\n        service.setActiveComponent(this);\n        this.emojiService = service;\n        let component = this;\n        service.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    @Input('attr.contenteditable')\n    protected set attrContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('contenteditable')\n    protected set inputContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('enterOn')\n    protected set inputEnterOn(enterOn: EnterOn) {\n        this.enterOn = enterOn;\n    }\n\n    @Input('text')\n    protected set inputText(text: string) {\n        this.setText(text);\n    }\n\n    @Output('text')\n    protected readonly onText: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output('enter')\n    protected readonly onEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output('entities')\n    protected readonly onEntities: EventEmitter<void> = new EventEmitter<void>();\n\n    @HostListener(\"keydown.enter\", ['$event'])\n    protected onKeydownEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsEnter()) {\n            this.emitEnter();\n        } else {\n            this.insertNewLine();\n        }\n    }\n\n    @HostListener(\"keydown.control.enter\", ['$event'])\n    protected onKeydownControlEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsCtrlEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"keydown.shift.enter\", ['$event'])\n    protected onKeydownShiftEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsShiftEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"focus\")\n    protected onFocus(): void {\n        this.emojiService.setActiveComponent(this);\n    }\n\n    @HostListener(\"focusout\")\n    protected onFocusout(): void {\n        this.lastSelectionRange = this.getSelectionRange();\n    }\n\n    public setContentEditable(editable: boolean): void {\n        /*if (this.contenteditable != editable && editable == true) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.fromHtml(this.elRef.nativeElement.innerHTML);\n        }\n        if (this.contenteditable != editable && editable == false) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.toHtml(this.elRef.nativeElement.innerHTML);\n        }*/\n        this.contenteditable = editable;\n        this.elRef.nativeElement.setAttribute('contenteditable', editable);\n    }\n\n    public isContentEditable(): boolean {\n        return this.contenteditable;\n    }\n\n    public enterKeyIsEnter(): boolean {\n        return !this.enterKeyIsShiftEnter() && !this.enterKeyIsCtrlEnter();\n    }\n\n    public enterKeyIsCtrlEnter(): boolean {\n        return (this.enterOn.ctrl) ? true : false;\n    }\n\n    public enterKeyIsShiftEnter(): boolean {\n        return (this.enterOn.shift) ? true : false;\n    }\n\n    public setText(text: string): void {\n        this.elRef.nativeElement.innerHTML = this.htmlConverter.filterHtml(text);\n    }\n\n    public getText(): string {\n        let text = this.elRef.nativeElement.innerHTML;\n        // hotfix to insert new line\n        if (text.substr(text.length - 2) == '\\n\\n') {\n            text = text.substr(0, text.length - 1);\n        }\n        return text;\n    }\n\n    public getNativeElement(): HTMLElement {\n        return this.elRef.nativeElement;\n    }\n\n    protected emitEnter(): void {\n        this.onText.emit(this.getText());\n        this.onEnter.emit();\n        this.elRef.nativeElement.innerHTML = '';\n    }\n\n    protected insertNewLine(): void {\n        this.insertText('\\n');\n    }\n\n    protected insertEmoji(emoji: string): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        if (!this.emojiService.isActiveComponent(this)) {\n            return;\n        }\n        this.insertText(' ' + emoji + ' ');\n    }\n\n    protected insertText(text: string): void {\n        let currentText = this.elRef.nativeElement.innerHTML;\n        let selection: SelectionRange;\n        if (document.activeElement === this.elRef.nativeElement) {\n            selection = this.getSelectionRange();\n        } else {\n            selection = this.lastSelectionRange;\n        }\n\n        this.elRef.nativeElement.innerHTML =\n            currentText.substr(0, selection.start)\n            + text\n            + currentText.substr(selection.stop);\n\n        // hotfix to insert new line\n        if (selection.stop == currentText.length && text == '\\n') {\n            this.elRef.nativeElement.innerHTML = this.elRef.nativeElement.innerHTML + '\\n';\n        }\n\n        this.setCaretPosition(selection.start + text.length);\n    }\n\n    protected getSelectionRange(): SelectionRange {\n        let selection = window.getSelection();\n        let start = 0;\n        let stop = 0;\n\n        if (selection.type == 'Caret') {\n            start = selection.extentOffset;\n            stop = selection.extentOffset;\n        }\n        if (selection.type == 'Range') {\n            start = selection.extentOffset;\n            stop = selection.anchorOffset;\n            if (start > stop) {\n                start = selection.anchorOffset;\n                stop = selection.extentOffset;\n            }\n        }\n        return {\n            start: start,\n            stop: stop\n        }\n    }\n\n    protected setCaretPosition(pos: number): void {\n        let selection = window.getSelection();\n        selection.collapse(this.elRef.nativeElement.firstChild, pos);\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from \"rxjs/Subject\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Injectable()\nexport class NgxEmojiService {\n    public readonly onEmojiPicked: Subject<string> = new Subject<string>();\n    protected activeComponent: NgxEmojiComponent;\n\n    public setActiveComponent(component: NgxEmojiComponent): void {\n        this.activeComponent = component;\n    }\n\n    public isActiveComponent(component: NgxEmojiComponent): boolean {\n        return component === this.activeComponent;\n    }\n\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Component({\n    selector: 'ngx-emoji-picker',\n    template: `<button type=\"button\" (click)=\"emojiPicked(':)')\">:)</button>\n<button type=\"button\" (click)=\"emojiPicked(';)')\">;)</button>\n<button type=\"button\" (click)=\"emojiPicked(':D')\">:D</button>\n`\n})\nexport class NgxEmojiPickerComponent {\n\n    public constructor(\n        protected emojiService: NgxEmojiService\n    ) {\n    }\n\n    @Input('for')\n    protected set inputFor(emojiComponent: NgxEmojiComponent) {\n        this.emojiService = new NgxEmojiService();\n        emojiComponent.addEmojiService(this.emojiService);\n    }\n\n    protected emojiPicked(emoji: string): void {\n        this.emojiService.onEmojiPicked.next(emoji);\n    }\n\n}\n",
    "import { NgModule } from '@angular/core';\n//import { CommonModule } from '@angular/common';\nimport { NgxEmojiPickerComponent } from './ngx-emoji-picker.component';\nimport { NgxEmojiComponent } from './ngx-emoji.component';\nimport { NgxEmojiService } from './ngx-emoji.service';\n\nrequire('./ngx-emoji.less');\n\n@NgModule({\n    imports: [\n        //CommonModule\n    ],\n    declarations: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ],\n    providers: [\n        NgxEmojiService\n    ],\n    exports: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ]\n})\nexport class NgxEmojiModule {\n}\n"
  ],
  "names": [
    "NgxHtmlConverter",
    "prototype",
    "fromHtml",
    "html",
    "replace",
    "toHtml",
    "text",
    "filterHtml",
    "tmp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "this",
    "elRef",
    "contenteditable",
    "enterOn",
    "shift",
    "ctrl",
    "htmlConverter",
    "lastSelectionRange",
    "start",
    "stop",
    "onText",
    "EventEmitter",
    "onEnter",
    "onEntities",
    "component",
    "globalEmojiService",
    "setActiveComponent",
    "emojiService",
    "globalEmojiServiceSubscription",
    "onEmojiPicked",
    "subscribe",
    "emoji",
    "insertEmoji",
    "unsubscribe",
    "service",
    "set",
    "editable",
    "setContentEditable",
    "enumerable",
    "configurable",
    "Object",
    "defineProperty",
    "NgxEmojiComponent",
    "setText",
    "isContentEditable",
    "event",
    "preventDefault",
    "enterKeyIsEnter",
    "emitEnter",
    "onKeydownControlEnter",
    "enterKeyIsCtrlEnter",
    "onFocusout",
    "substr",
    "length",
    "getNativeElement",
    "nativeElement",
    "emit",
    "getText",
    "insertNewLine",
    "isActiveComponent",
    "insertText",
    "selection",
    "currentText",
    "activeElement",
    "setCaretPosition",
    "getSelectionRange",
    "window",
    "getSelection",
    "type",
    "extentOffset",
    "anchorOffset",
    "collapse",
    "firstChild",
    "pos",
    "decorators",
    "Component",
    "args",
    "selector",
    "template",
    "ctorParameters",
    "inputEnterOn",
    "Input",
    "Output",
    "onFocus",
    "HostListener",
    "NgxEmojiService",
    "NgxEmojiPickerComponent",
    "emojiComponent",
    "addEmojiService",
    "propDecorators",
    "inputFor"
  ],
  "mappings": "oWAAA,SAAAA,YAGAA,EAAAC,UAAAC,SAAA,SAAAC,UACAA,EAAAC,QAAA,OAAA,OAIAJ,EAAAC,UAAAI,OAAuB,SAAvBC,UACAA,EAAAF,QAAA,KAAA,SAIAJ,EAAAC,UAAAM,WAA2B,SAA3BD,GACQ,IAAqBE,EAA7BC,SAAAC,cAAA,cACQF,EAAIG,UAAZL,EACQA,EAAOE,EAAII,aAAnBJ,EAAAK,WAAA,sCCkBAC,KAAAC,MAAmCA,EAAjBD,KAAlBE,iBAAA,EAdAF,KAAAG,SACAC,OAAA,EACQC,MAAR,GAEAL,KAAAM,cAAA,IAAApB,EACAc,KAAAO,oBAGAC,MAAA,EACQC,KAAR,GAEAT,KAAAU,OAAA,IAAAC,EAAAA,aA+CAX,KAAAY,QAAA,IAAAD,EAAAA,aAGAX,KAAAa,WAAA,IAAAF,EAAAA,aAGA,IAAAG,EAAAd,KA/CQe,EAARC,mBAA6BhB,MACrBA,KAARiB,aAAAF,EACQf,KAAKkB,+BAAiClB,KAA9CiB,aAAAE,cAAAC,UAAA,SAAAC,GACYP,EAAZQ,YAAAD,KA2BA,+CAtBArB,KAAAkB,gCACYlB,KAAKkB,+BAAjBK,cAEAC,EAAAR,mBAAAhB,MACQA,KAARiB,aAAAO,EACQ,IAARV,EAAAd,KACQwB,EAARL,cAAAC,UAAA,SAAAC,GACAP,EAAAQ,YAAAD,+DAMkBI,IAAlB,SAAAC,GACY1B,KAAZ2B,mBAAAD,0IASkBE,YAAY,EACtBC,cAAR,sDAKQJ,IAAK,SAAbtB,mDAac2B,OAAdC,eAAAC,EAAA7C,UAAA,aAKQsC,IAAR,SAAAjC,GACYQ,KAAKiC,QAAjBzC,IACAoC,YAAA,EACAC,cAAA,2CAKA7B,KAAAkC,sBAGAC,EAAAC,iBACApC,KAAAqC,kBACYrC,KAAKsC,mCAQjBN,EAAA7C,UAAAoD,sBAAA,SAAAJ,GACAnC,KAAAkC,sBAGAC,EAAAC,iBACApC,KAAAwC,iHAUQL,EAARC,4IAWAJ,EAAA7C,UAAgCsD,WAAa,2dA0BrC,QAAQzC,KAAhBG,QAAA,oLAcA,MAHA,QAAYX,EAAZkD,OAAwBlD,EAAKmD,OAA7B,KACYnD,EAAZA,EAAAkD,OAAA,EAAAlD,EAAAmD,OAAA,IAEAnD,GAGAwC,EAAA7C,UAAAyD,iBAAA,WACA,OAAA5C,KAAAC,MAAA4C,eAEcb,EAAd7C,UAAAmD,UAAA,WACQtC,KAAKU,OAAboC,KAAA9C,KAAA+C,WACA/C,KAAAY,QAAAkC,OACA9C,KAAAC,MAAA4C,cAAAhD,UAAA,IAKAmC,EAAA7C,UAAA6D,cAAA,kCAIAhB,EAAA7C,UAAAmC,YAAA,SAAAD,GACArB,KAAAkC,qBAEelC,KAAfiB,aAAAgC,kBAAAjD,OAIQA,KAAKkD,WAAb,IAAA7B,EAAA,MAOAW,EAAsB7C,UAAtB+D,WAAA,SAAA1D,GACA,IAE6B2D,EAF7BC,EAAApD,KAAAC,MAAA4C,cAAAhD,YAGAF,SAAA0D,gBAAArD,KAAAC,MAAA4C,uCAEA7C,KAAAO,mBAEQP,KAARC,MAAA4C,cAAAhD,UACAuD,EAAAV,OAAA,EAAAS,EAAA3C,OAEAhB,EACA4D,EAA8BV,OAA9BS,EAAA1C,MAEA0C,EAAA1C,MAAA2C,EAAAT,QAAA,MAAAnD,IACYQ,KAAZC,MAAA4C,cAAqChD,UAArCG,KAAAC,MAAA4C,cAAAhD,UAAA,MAEAG,KAAAsD,iBAAAH,EAAA3C,MAAAhB,EAAAmD,SAKAX,EAAA7C,UAAAoE,kBAAA,WACQ,IAARJ,EAAAK,OAAAC,eACAjD,EAAA,EACAC,EAAA,EA7NA,MA8NA,SAAA0C,EAAAO,OACAlD,EAAA2C,EAAAQ,oEAEAlD,EAAA0C,EAAAS,gBAEApD,EAAA2C,EAAAS,aACAnD,EAAA0C,EAAAQ,eAnOAnD,MAAAA,EACAC,KAAAA,mEAwCAoD,SAAA7D,KAAAC,MAAA4C,cAAAiB,WAAAC,IAUA/B,KAUAA,EAAAgC,aAGAN,KAAAO,EAAAA,UAAAC,OAGAC,SAAA,YAGAC,SAAA,OAwCApC,EAAAqC,eAAA,WAAA,0LC9HAC,eAAAZ,KAAAa,EAAAA,MAAAL,MAAA,sDAMAxD,SAAAgD,KAAAc,EAAAA,OAAAN,MAAA,uVAGWO,UAAXf,KAAAgB,EAAAA,aAAAR,MAAA,WACAzB,aAAAiB,KAAAgB,EAAAA,aAAyCR,MAAzC,eAGA,IAAWS,EAAX,WACA,SAAAA,qCCAA,qJAAAA,EDDA,6FCWc,SAAdC,EAAA3D,GACQjB,KAAKiB,aAAbA,+FAhBA4D,EAAAC,gBAAA9E,KAAAiB,gJCTAyC,KAAAO,EAAAA,UAAAC,OAEAC,SAI0B,mBAgB1BC,SAAA,0MAbAQ,EAAAP,eAAA,WAAA,QAGAX,KAAAiB,KAEAC,EAAAG,gBACAC,WAAAtB,KAAaa,EAAAA,MAAbL,MAAA"
}
