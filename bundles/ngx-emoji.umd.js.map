{
  "version": 3,
  "file": "ngx-emoji.umd.js",
  "sources": [
    "ng://ngx-emoji/src/main/ngx-emoji.module.ts",
    "ng://ngx-emoji/src/main/ngx-emoji-picker.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.service.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.component.ts",
    "ng://ngx-emoji/src/main/ngx-html.converter.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n//import { CommonModule } from '@angular/common';\nimport { NgxEmojiPickerComponent } from './ngx-emoji-picker.component';\nimport { NgxEmojiComponent } from './ngx-emoji.component';\nimport { NgxEmojiService } from './ngx-emoji.service';\n\n//require('./ngx-emoji.less');\n\n@NgModule({\n    imports: [\n        //CommonModule\n    ],\n    declarations: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ],\n    providers: [\n        NgxEmojiService\n    ],\n    exports: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ]\n})\nexport class NgxEmojiModule {\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Component({\n    selector: 'ngx-emoji-picker',\n    template: `<button type=\"button\" (click)=\"emojiPicked(':)')\">:)</button>\n<button type=\"button\" (click)=\"emojiPicked(';)')\">;)</button>\n<button type=\"button\" (click)=\"emojiPicked(':D')\">:D</button>\n`\n})\nexport class NgxEmojiPickerComponent {\n\n    public constructor(\n        protected emojiService: NgxEmojiService\n    ) {\n    }\n\n    public setEmojiService(service: NgxEmojiService): void {\n        this.emojiService = service;\n    }\n\n    @Input('for')\n    protected set inputFor(emojiComponent: NgxEmojiComponent) {\n        this.emojiService = new NgxEmojiService();\n        emojiComponent.addEmojiService(this.emojiService);\n    }\n\n    protected emojiPicked(emoji: string): void {\n        this.emojiService.onEmojiPicked.next(emoji);\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from \"rxjs/Subject\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Injectable()\nexport class NgxEmojiService {\n    public readonly onEmojiPicked: Subject<string> = new Subject<string>();\n    protected activeComponent: NgxEmojiComponent;\n\n    public setActiveComponent(component: NgxEmojiComponent): void {\n        this.activeComponent = component;\n    }\n\n    public isActiveComponent(component: NgxEmojiComponent): boolean {\n        return component === this.activeComponent;\n    }\n\n}\n",
    "import { Component, OnDestroy, ElementRef, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxHtmlConverter } from \"./ngx-html.converter\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { NgxEmojiPickerComponent } from \"./ngx-emoji-picker.component\";\n\nexport interface EnterOn {\n    shift?: boolean;\n    ctrl?: boolean;\n}\n\nexport interface SelectionRange {\n    start: number;\n    stop: number;\n}\n\n@Component({\n    selector: 'ngx-emoji',\n    template: '',\n    styles: [`ngx-emoji,\nngx-emoji-picker {\n  display: block;\n}\nngx-emoji {\n  white-space: pre-wrap;\n}\n`]\n})\nexport class NgxEmojiComponent implements OnDestroy {\n    private contenteditable: boolean = false;\n    private enterOn: EnterOn = {\n        shift: false,\n        ctrl: false\n    };\n    protected readonly htmlConverter = new NgxHtmlConverter();\n    protected emojiService: NgxEmojiService;\n    protected emojiServiceSubscription: Subscription = new Subscription();\n    protected lastSelectionRange: SelectionRange = {\n        start: 0,\n        stop: 0\n    };\n\n    public constructor(\n        protected elRef: ElementRef,\n        globalEmojiService: NgxEmojiService\n    ) {\n        let component = this;\n        globalEmojiService.setActiveComponent(this);\n        this.emojiService = globalEmojiService;\n        let subscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    public ngOnDestroy(): void {\n        this.emojiServiceSubscription.unsubscribe();\n    }\n\n    public addEmojiService(service: NgxEmojiService): void {\n        service.setActiveComponent(this);\n        let component = this;\n        let subscription = service.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    @Input('picker')\n    protected set inputPicker(pickerComponent: NgxEmojiPickerComponent) {\n        this.emojiServiceSubscription.unsubscribe();\n        this.emojiServiceSubscription = new Subscription();\n        this.emojiService = new NgxEmojiService();\n        this.emojiService.setActiveComponent(this);\n        pickerComponent.setEmojiService(this.emojiService);\n        let component = this;\n        let subscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    @Input('attr.contenteditable')\n    protected set attrContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('contenteditable')\n    protected set inputContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('enterOn')\n    protected set inputEnterOn(enterOn: EnterOn) {\n        this.enterOn = enterOn;\n    }\n\n    @Input('text')\n    protected set inputText(text: string) {\n        this.setText(text);\n    }\n\n    @Output('text')\n    protected readonly onText: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output('enter')\n    protected readonly onEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output('entities')\n    protected readonly onEntities: EventEmitter<void> = new EventEmitter<void>();\n\n    @HostListener(\"keydown.enter\", ['$event'])\n    protected onKeydownEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsEnter()) {\n            this.emitEnter();\n        } else {\n            this.insertNewLine();\n        }\n    }\n\n    @HostListener(\"keydown.control.enter\", ['$event'])\n    protected onKeydownControlEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsCtrlEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"keydown.shift.enter\", ['$event'])\n    protected onKeydownShiftEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsShiftEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"focus\")\n    protected onFocus(): void {\n        this.emojiService.setActiveComponent(this);\n    }\n\n    @HostListener(\"focusout\")\n    protected onFocusout(): void {\n        this.lastSelectionRange = this.getSelectionRange();\n    }\n\n    public setContentEditable(editable: boolean): void {\n        /*if (this.contenteditable != editable && editable == true) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.fromHtml(this.elRef.nativeElement.innerHTML);\n        }\n        if (this.contenteditable != editable && editable == false) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.toHtml(this.elRef.nativeElement.innerHTML);\n        }*/\n        this.contenteditable = editable;\n        this.elRef.nativeElement.setAttribute('contenteditable', editable);\n    }\n\n    public isContentEditable(): boolean {\n        return this.contenteditable;\n    }\n\n    public enterKeyIsEnter(): boolean {\n        return !this.enterKeyIsShiftEnter() && !this.enterKeyIsCtrlEnter();\n    }\n\n    public enterKeyIsCtrlEnter(): boolean {\n        return (this.enterOn.ctrl) ? true : false;\n    }\n\n    public enterKeyIsShiftEnter(): boolean {\n        return (this.enterOn.shift) ? true : false;\n    }\n\n    public setText(text: string): void {\n        this.elRef.nativeElement.innerHTML = this.htmlConverter.filterHtml(text);\n    }\n\n    public getText(): string {\n        let text = this.elRef.nativeElement.innerHTML;\n        // hotfix to insert new line\n        if (text.substr(text.length - 2) == '\\n\\n') {\n            text = text.substr(0, text.length - 1);\n        }\n        return text;\n    }\n\n    public getNativeElement(): HTMLElement {\n        return this.elRef.nativeElement;\n    }\n\n    protected emitEnter(): void {\n        this.onText.emit(this.getText());\n        this.onEnter.emit();\n        this.elRef.nativeElement.innerHTML = '';\n    }\n\n    protected insertNewLine(): void {\n        this.insertText('\\n');\n    }\n\n    protected insertEmoji(emoji: string): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        if (!this.emojiService.isActiveComponent(this)) {\n            return;\n        }\n        this.insertText(' ' + emoji + ' ');\n    }\n\n    protected insertText(text: string): void {\n        let currentText = this.elRef.nativeElement.innerHTML;\n        let selection: SelectionRange;\n        if (document.activeElement === this.elRef.nativeElement) {\n            selection = this.getSelectionRange();\n        } else {\n            selection = this.lastSelectionRange;\n        }\n\n        this.elRef.nativeElement.innerHTML =\n            currentText.substr(0, selection.start)\n            + text\n            + currentText.substr(selection.stop);\n\n        // hotfix to insert new line\n        if (selection.stop == currentText.length && text == '\\n') {\n            this.elRef.nativeElement.innerHTML = this.elRef.nativeElement.innerHTML + '\\n';\n        }\n\n        this.setCaretPosition(selection.start + text.length);\n    }\n\n    protected getSelectionRange(): SelectionRange {\n        let selection = window.getSelection();\n        let start = 0;\n        let stop = 0;\n\n        if (selection.type == 'Caret') {\n            start = selection.extentOffset;\n            stop = selection.extentOffset;\n        }\n        if (selection.type == 'Range') {\n            start = selection.extentOffset;\n            stop = selection.anchorOffset;\n            if (start > stop) {\n                start = selection.anchorOffset;\n                stop = selection.extentOffset;\n            }\n        }\n        return {\n            start: start,\n            stop: stop\n        }\n    }\n\n    protected setCaretPosition(pos: number): void {\n        let selection = window.getSelection();\n        selection.collapse(this.elRef.nativeElement.firstChild, pos);\n    }\n\n}\n",
    "export class NgxHtmlConverter {\n\n    public fromHtml(html: string): string {\n        let text = html.replace('<br>', '\\n');\n        return text;\n    }\n\n    public toHtml(text: string): string {\n        let html = text.replace('\\n', '<br>');\n        return html;\n    }\n\n    public filterHtml(text: string): string {\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = text;\n        text = tmp.textContent || tmp.innerText || \"\";\n        return text;\n    }\n\n}\n"
  ],
  "names": [
    "Input",
    "Injectable",
    "HostListener",
    "Output",
    "ElementRef",
    "Component",
    "Subscription",
    "Subscription$1",
    "EventEmitter"
  ],
  "mappings": "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"
}
