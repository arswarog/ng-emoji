{
  "version": 3,
  "file": "ngx-emoji.umd.min.js",
  "sources": [
    "ng://ngx-emoji/src/main/ngx-html.converter.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.service.ts",
    "ng://ngx-emoji/src/main/ngx-emoji-picker.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.module.ts"
  ],
  "sourcesContent": [
    "export class NgxHtmlConverter {\n\n    public fromHtml(html: string): string {\n        let text = html.replace('<br>', '\\n');\n        return text;\n    }\n\n    public toHtml(text: string): string {\n        let html = text.replace('\\n', '<br>');\n        return html;\n    }\n\n    public filterHtml(text: string): string {\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = text;\n        text = tmp.textContent || tmp.innerText || \"\";\n        return text;\n    }\n\n}\n",
    "import { Component, OnDestroy, ElementRef, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxHtmlConverter } from \"./ngx-html.converter\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { NgxEmojiPickerComponent } from \"./ngx-emoji-picker.component\";\n\nexport interface EnterOn {\n    shift?: boolean;\n    ctrl?: boolean;\n}\n\nexport interface SelectionRange {\n    start: number;\n    stop: number;\n}\n\n@Component({\n    selector: 'ngx-emoji',\n    template: ''\n})\nexport class NgxEmojiComponent implements OnDestroy {\n    private contenteditable: boolean = false;\n    private enterOn: EnterOn = {\n        shift: false,\n        ctrl: false\n    };\n    protected readonly htmlConverter = new NgxHtmlConverter();\n    protected emojiService: NgxEmojiService;\n    protected emojiServiceSubscription: Subscription = new Subscription();\n    protected lastSelectionRange: SelectionRange = {\n        start: 0,\n        stop: 0\n    };\n\n    public constructor(\n        protected elRef: ElementRef,\n        globalEmojiService: NgxEmojiService\n    ) {\n        let component = this;\n        globalEmojiService.setActiveComponent(this);\n        this.emojiService = globalEmojiService;\n        let subscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    public ngOnDestroy(): void {\n        this.emojiServiceSubscription.unsubscribe();\n    }\n\n    public addEmojiService(service: NgxEmojiService): void {\n        service.setActiveComponent(this);\n        let component = this;\n        let subscription = service.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    @Input('picker')\n    protected set inputPicker(pickerComponent: NgxEmojiPickerComponent) {\n        this.emojiServiceSubscription.unsubscribe();\n        this.emojiServiceSubscription = new Subscription();\n        this.emojiService = new NgxEmojiService();\n        this.emojiService.setActiveComponent(this);\n        pickerComponent.setEmojiService(this.emojiService);\n        let component = this;\n        let subscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n        this.emojiServiceSubscription.add(subscription);\n    }\n\n    @Input('attr.contenteditable')\n    protected set attrContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('contenteditable')\n    protected set inputContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('enterOn')\n    protected set inputEnterOn(enterOn: EnterOn) {\n        this.enterOn = enterOn;\n    }\n\n    @Input('text')\n    protected set inputText(text: string) {\n        this.setText(text);\n    }\n\n    @Output('text')\n    protected readonly onText: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output('enter')\n    protected readonly onEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output('entities')\n    protected readonly onEntities: EventEmitter<void> = new EventEmitter<void>();\n\n    @HostListener(\"keydown.enter\", ['$event'])\n    protected onKeydownEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsEnter()) {\n            this.emitEnter();\n        } else {\n            this.insertNewLine();\n        }\n    }\n\n    @HostListener(\"keydown.control.enter\", ['$event'])\n    protected onKeydownControlEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsCtrlEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"keydown.shift.enter\", ['$event'])\n    protected onKeydownShiftEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsShiftEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"focus\")\n    protected onFocus(): void {\n        this.emojiService.setActiveComponent(this);\n    }\n\n    @HostListener(\"focusout\")\n    protected onFocusout(): void {\n        this.lastSelectionRange = this.getSelectionRange();\n    }\n\n    public setContentEditable(editable: boolean): void {\n        /*if (this.contenteditable != editable && editable == true) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.fromHtml(this.elRef.nativeElement.innerHTML);\n        }\n        if (this.contenteditable != editable && editable == false) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.toHtml(this.elRef.nativeElement.innerHTML);\n        }*/\n        this.contenteditable = editable;\n        this.elRef.nativeElement.setAttribute('contenteditable', editable);\n    }\n\n    public isContentEditable(): boolean {\n        return this.contenteditable;\n    }\n\n    public enterKeyIsEnter(): boolean {\n        return !this.enterKeyIsShiftEnter() && !this.enterKeyIsCtrlEnter();\n    }\n\n    public enterKeyIsCtrlEnter(): boolean {\n        return (this.enterOn.ctrl) ? true : false;\n    }\n\n    public enterKeyIsShiftEnter(): boolean {\n        return (this.enterOn.shift) ? true : false;\n    }\n\n    public setText(text: string): void {\n        this.elRef.nativeElement.innerHTML = this.htmlConverter.filterHtml(text);\n    }\n\n    public getText(): string {\n        let text = this.elRef.nativeElement.innerHTML;\n        // hotfix to insert new line\n        if (text.substr(text.length - 2) == '\\n\\n') {\n            text = text.substr(0, text.length - 1);\n        }\n        return text;\n    }\n\n    public getNativeElement(): HTMLElement {\n        return this.elRef.nativeElement;\n    }\n\n    protected emitEnter(): void {\n        this.onText.emit(this.getText());\n        this.onEnter.emit();\n        this.elRef.nativeElement.innerHTML = '';\n    }\n\n    protected insertNewLine(): void {\n        this.insertText('\\n');\n    }\n\n    protected insertEmoji(emoji: string): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        if (!this.emojiService.isActiveComponent(this)) {\n            return;\n        }\n        this.insertText(' ' + emoji + ' ');\n    }\n\n    protected insertText(text: string): void {\n        let currentText = this.elRef.nativeElement.innerHTML;\n        let selection: SelectionRange;\n        if (document.activeElement === this.elRef.nativeElement) {\n            selection = this.getSelectionRange();\n        } else {\n            selection = this.lastSelectionRange;\n        }\n\n        this.elRef.nativeElement.innerHTML =\n            currentText.substr(0, selection.start)\n            + text\n            + currentText.substr(selection.stop);\n\n        // hotfix to insert new line\n        if (selection.stop == currentText.length && text == '\\n') {\n            this.elRef.nativeElement.innerHTML = this.elRef.nativeElement.innerHTML + '\\n';\n        }\n\n        this.setCaretPosition(selection.start + text.length);\n    }\n\n    protected getSelectionRange(): SelectionRange {\n        let selection = window.getSelection();\n        let start = 0;\n        let stop = 0;\n\n        if (selection.type == 'Caret') {\n            start = selection.extentOffset;\n            stop = selection.extentOffset;\n        }\n        if (selection.type == 'Range') {\n            start = selection.extentOffset;\n            stop = selection.anchorOffset;\n            if (start > stop) {\n                start = selection.anchorOffset;\n                stop = selection.extentOffset;\n            }\n        }\n        return {\n            start: start,\n            stop: stop\n        }\n    }\n\n    protected setCaretPosition(pos: number): void {\n        let selection = window.getSelection();\n        selection.collapse(this.elRef.nativeElement.firstChild, pos);\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from \"rxjs/Subject\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Injectable()\nexport class NgxEmojiService {\n    public readonly onEmojiPicked: Subject<string> = new Subject<string>();\n    protected activeComponent: NgxEmojiComponent;\n\n    public setActiveComponent(component: NgxEmojiComponent): void {\n        this.activeComponent = component;\n    }\n\n    public isActiveComponent(component: NgxEmojiComponent): boolean {\n        return component === this.activeComponent;\n    }\n\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Component({\n    selector: 'ngx-emoji-picker',\n    template: `<button type=\"button\" (click)=\"emojiPicked(':)')\">:)</button>\n<button type=\"button\" (click)=\"emojiPicked(';)')\">;)</button>\n<button type=\"button\" (click)=\"emojiPicked(':D')\">:D</button>\n`\n})\nexport class NgxEmojiPickerComponent {\n\n    public constructor(\n        protected emojiService: NgxEmojiService\n    ) {\n    }\n\n    public setEmojiService(service: NgxEmojiService): void {\n        this.emojiService = service;\n    }\n\n    @Input('for')\n    protected set inputFor(emojiComponent: NgxEmojiComponent) {\n        this.emojiService = new NgxEmojiService();\n        emojiComponent.addEmojiService(this.emojiService);\n    }\n\n    protected emojiPicked(emoji: string): void {\n        this.emojiService.onEmojiPicked.next(emoji);\n    }\n\n}\n",
    "import { NgModule } from '@angular/core';\n//import { CommonModule } from '@angular/common';\nimport { NgxEmojiPickerComponent } from './ngx-emoji-picker.component';\nimport { NgxEmojiComponent } from './ngx-emoji.component';\nimport { NgxEmojiService } from './ngx-emoji.service';\n\nimport 'main/ngx-emoji.less';\n\n@NgModule({\n    imports: [\n        //CommonModule\n    ],\n    declarations: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ],\n    providers: [\n        NgxEmojiService\n    ],\n    exports: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ]\n})\nexport class NgxEmojiModule {\n}\n"
  ],
  "names": [
    "NgxHtmlConverter",
    "prototype",
    "fromHtml",
    "html",
    "replace",
    "toHtml",
    "text",
    "filterHtml",
    "tmp",
    "document",
    "createElement",
    "innerHTML",
    "textContent",
    "innerText",
    "this",
    "elRef",
    "contenteditable",
    "enterOn",
    "shift",
    "ctrl",
    "htmlConverter",
    "emojiServiceSubscription",
    "Subscription$1",
    "lastSelectionRange",
    "start",
    "stop",
    "onText",
    "EventEmitter",
    "onEnter",
    "onEntities",
    "component",
    "globalEmojiService",
    "setActiveComponent",
    "emojiService",
    "subscription",
    "onEmojiPicked",
    "subscribe",
    "emoji",
    "insertEmoji",
    "add",
    "unsubscribe",
    "service",
    "set",
    "pickerComponent",
    "Subscription",
    "NgxEmojiService",
    "setEmojiService",
    "enumerable",
    "configurable",
    "editable",
    "Object",
    "defineProperty",
    "NgxEmojiComponent",
    "setText",
    "onKeydownEnter",
    "event",
    "isContentEditable",
    "preventDefault",
    "onKeydownControlEnter",
    "emitEnter",
    "onKeydownShiftEnter",
    "getSelectionRange",
    "setContentEditable",
    "enterKeyIsEnter",
    "enterKeyIsShiftEnter",
    "enterKeyIsCtrlEnter",
    "getText",
    "nativeElement",
    "emit",
    "insertText",
    "isActiveComponent",
    "selection",
    "activeElement",
    "currentText",
    "substr",
    "length",
    "setCaretPosition",
    "window",
    "getSelection",
    "extentOffset",
    "type",
    "anchorOffset",
    "pos",
    "collapse",
    "firstChild",
    "decorators",
    "Component",
    "args",
    "selector",
    "template",
    "propDecorators",
    "attrContenteditable",
    "Input",
    "Output",
    "HostListener",
    "Injectable",
    "NgxEmojiPickerComponent",
    "ctorParameters",
    "inputFor"
  ],
  "mappings": "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"
}
