{
  "version": 3,
  "file": "ngx-emoji.umd.js",
  "sources": [
    "ng://ngx-emoji/src/main/ngx-emoji.module.ts",
    "ng://ngx-emoji/src/main/ngx-emoji-picker.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.service.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.component.ts",
    "ng://ngx-emoji/src/main/ngx-html.converter.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n//import { CommonModule } from '@angular/common';\nimport { NgxEmojiPickerComponent } from './ngx-emoji-picker.component';\nimport { NgxEmojiComponent } from './ngx-emoji.component';\nimport { NgxEmojiService } from './ngx-emoji.service';\n\nrequire('./ngx-emoji.less');\n\n@NgModule({\n    imports: [\n        //CommonModule\n    ],\n    declarations: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ],\n    providers: [\n        NgxEmojiService\n    ],\n    exports: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ]\n})\nexport class NgxEmojiModule {\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Component({\n    selector: 'ngx-emoji-picker',\n    template: `<button type=\"button\" (click)=\"emojiPicked(':)')\">:)</button>\n<button type=\"button\" (click)=\"emojiPicked(';)')\">;)</button>\n<button type=\"button\" (click)=\"emojiPicked(':D')\">:D</button>\n`\n})\nexport class NgxEmojiPickerComponent {\n\n    public constructor(\n        protected emojiService: NgxEmojiService\n    ) {\n    }\n\n    @Input('for')\n    protected set inputFor(emojiComponent: NgxEmojiComponent) {\n        this.emojiService = new NgxEmojiService();\n        emojiComponent.addEmojiService(this.emojiService);\n    }\n\n    protected emojiPicked(emoji: string): void {\n        this.emojiService.onEmojiPicked.next(emoji);\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from \"rxjs/Subject\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Injectable()\nexport class NgxEmojiService {\n    public readonly onEmojiPicked: Subject<string> = new Subject<string>();\n    protected activeComponent: NgxEmojiComponent;\n\n    public setActiveComponent(component: NgxEmojiComponent): void {\n        this.activeComponent = component;\n    }\n\n    public isActiveComponent(component: NgxEmojiComponent): boolean {\n        return component === this.activeComponent;\n    }\n\n}\n",
    "import { Component, ElementRef, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxHtmlConverter } from \"./ngx-html.converter\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nexport interface EnterOn {\n    shift?: boolean;\n    ctrl?: boolean;\n}\n\nexport interface SelectionRange {\n    start: number;\n    stop: number;\n}\n\n@Component({\n    selector: 'ngx-emoji',\n    template: ''\n})\nexport class NgxEmojiComponent {\n    private contenteditable: boolean = false;\n    private enterOn: EnterOn = {\n        shift: false,\n        ctrl: false\n    };\n    protected readonly htmlConverter = new NgxHtmlConverter();\n    protected emojiService: NgxEmojiService;\n    protected globalEmojiServiceSubscription: Subscription;\n    protected lastSelectionRange: SelectionRange = {\n        start: 0,\n        stop: 0\n    };\n\n    public constructor(\n        protected elRef: ElementRef,\n        globalEmojiService: NgxEmojiService\n    ) {\n        let component = this;\n        globalEmojiService.setActiveComponent(this);\n        this.emojiService = globalEmojiService;\n        this.globalEmojiServiceSubscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    public addEmojiService(service: NgxEmojiService): void {\n        if (this.globalEmojiServiceSubscription) {\n            this.globalEmojiServiceSubscription.unsubscribe();\n        }\n        service.setActiveComponent(this);\n        this.emojiService = service;\n        let component = this;\n        service.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    @Input('attr.contenteditable')\n    protected set attrContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('contenteditable')\n    protected set inputContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('enterOn')\n    protected set inputEnterOn(enterOn: EnterOn) {\n        this.enterOn = enterOn;\n    }\n\n    @Input('text')\n    protected set inputText(text: string) {\n        this.setText(text);\n    }\n\n    @Output('text')\n    protected readonly onText: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output('enter')\n    protected readonly onEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output('entities')\n    protected readonly onEntities: EventEmitter<void> = new EventEmitter<void>();\n\n    @HostListener(\"keydown.enter\", ['$event'])\n    protected onKeydownEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsEnter()) {\n            this.emitEnter();\n        } else {\n            this.insertNewLine();\n        }\n    }\n\n    @HostListener(\"keydown.control.enter\", ['$event'])\n    protected onKeydownControlEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsCtrlEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"keydown.shift.enter\", ['$event'])\n    protected onKeydownShiftEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsShiftEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"focus\")\n    protected onFocus(): void {\n        this.emojiService.setActiveComponent(this);\n    }\n\n    @HostListener(\"focusout\")\n    protected onFocusout(): void {\n        this.lastSelectionRange = this.getSelectionRange();\n    }\n\n    public setContentEditable(editable: boolean): void {\n        /*if (this.contenteditable != editable && editable == true) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.fromHtml(this.elRef.nativeElement.innerHTML);\n        }\n        if (this.contenteditable != editable && editable == false) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.toHtml(this.elRef.nativeElement.innerHTML);\n        }*/\n        this.contenteditable = editable;\n        this.elRef.nativeElement.setAttribute('contenteditable', editable);\n    }\n\n    public isContentEditable(): boolean {\n        return this.contenteditable;\n    }\n\n    public enterKeyIsEnter(): boolean {\n        return !this.enterKeyIsShiftEnter() && !this.enterKeyIsCtrlEnter();\n    }\n\n    public enterKeyIsCtrlEnter(): boolean {\n        return (this.enterOn.ctrl) ? true : false;\n    }\n\n    public enterKeyIsShiftEnter(): boolean {\n        return (this.enterOn.shift) ? true : false;\n    }\n\n    public setText(text: string): void {\n        this.elRef.nativeElement.innerHTML = this.htmlConverter.filterHtml(text);\n    }\n\n    public getText(): string {\n        let text = this.elRef.nativeElement.innerHTML;\n        // hotfix to insert new line\n        if (text.substr(text.length - 2) == '\\n\\n') {\n            text = text.substr(0, text.length - 1);\n        }\n        return text;\n    }\n\n    public getNativeElement(): HTMLElement {\n        return this.elRef.nativeElement;\n    }\n\n    protected emitEnter(): void {\n        this.onText.emit(this.getText());\n        this.onEnter.emit();\n        this.elRef.nativeElement.innerHTML = '';\n    }\n\n    protected insertNewLine(): void {\n        this.insertText('\\n');\n    }\n\n    protected insertEmoji(emoji: string): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        if (!this.emojiService.isActiveComponent(this)) {\n            return;\n        }\n        this.insertText(' ' + emoji + ' ');\n    }\n\n    protected insertText(text: string): void {\n        let currentText = this.elRef.nativeElement.innerHTML;\n        let selection: SelectionRange;\n        if (document.activeElement === this.elRef.nativeElement) {\n            selection = this.getSelectionRange();\n        } else {\n            selection = this.lastSelectionRange;\n        }\n\n        this.elRef.nativeElement.innerHTML =\n            currentText.substr(0, selection.start)\n            + text\n            + currentText.substr(selection.stop);\n\n        // hotfix to insert new line\n        if (selection.stop == currentText.length && text == '\\n') {\n            this.elRef.nativeElement.innerHTML = this.elRef.nativeElement.innerHTML + '\\n';\n        }\n\n        this.setCaretPosition(selection.start + text.length);\n    }\n\n    protected getSelectionRange(): SelectionRange {\n        let selection = window.getSelection();\n        let start = 0;\n        let stop = 0;\n\n        if (selection.type == 'Caret') {\n            start = selection.extentOffset;\n            stop = selection.extentOffset;\n        }\n        if (selection.type == 'Range') {\n            start = selection.extentOffset;\n            stop = selection.anchorOffset;\n            if (start > stop) {\n                start = selection.anchorOffset;\n                stop = selection.extentOffset;\n            }\n        }\n        return {\n            start: start,\n            stop: stop\n        }\n    }\n\n    protected setCaretPosition(pos: number): void {\n        let selection = window.getSelection();\n        selection.collapse(this.elRef.nativeElement.firstChild, pos);\n    }\n\n}\n",
    "export class NgxHtmlConverter {\n\n    public fromHtml(html: string): string {\n        let text = html.replace('<br>', '\\n');\n        return text;\n    }\n\n    public toHtml(text: string): string {\n        let html = text.replace('\\n', '<br>');\n        return html;\n    }\n\n    public filterHtml(text: string): string {\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = text;\n        text = tmp.textContent || tmp.innerText || \"\";\n        return text;\n    }\n\n}\n"
  ],
  "names": [
    "Input",
    "Component",
    "HostListener",
    "Output",
    "EventEmitter"
  ],
  "mappings": "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"
}
