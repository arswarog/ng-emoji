{
  "version": 3,
  "file": "ngx-emoji.js",
  "sources": [
    "ng://ngx-emoji/src/main/ngx-emoji.module.ts",
    "ng://ngx-emoji/src/main/ngx-emoji-picker.component.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.service.ts",
    "ng://ngx-emoji/src/main/ngx-emoji.component.ts",
    "ng://ngx-emoji/src/main/ngx-html.converter.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n//import { CommonModule } from '@angular/common';\nimport { NgxEmojiPickerComponent } from './ngx-emoji-picker.component';\nimport { NgxEmojiComponent } from './ngx-emoji.component';\nimport { NgxEmojiService } from './ngx-emoji.service';\n\nrequire('./ngx-emoji.less');\n\n@NgModule({\n    imports: [\n        //CommonModule\n    ],\n    declarations: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ],\n    providers: [\n        NgxEmojiService\n    ],\n    exports: [\n        NgxEmojiPickerComponent, NgxEmojiComponent\n    ]\n})\nexport class NgxEmojiModule {\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Component({\n    selector: 'ngx-emoji-picker',\n    template: `<button type=\"button\" (click)=\"emojiPicked(':)')\">:)</button>\n<button type=\"button\" (click)=\"emojiPicked(';)')\">;)</button>\n<button type=\"button\" (click)=\"emojiPicked(':D')\">:D</button>\n`\n})\nexport class NgxEmojiPickerComponent {\n\n    public constructor(\n        protected emojiService: NgxEmojiService\n    ) {\n    }\n\n    @Input('for')\n    protected set inputFor(emojiComponent: NgxEmojiComponent) {\n        this.emojiService = new NgxEmojiService();\n        emojiComponent.addEmojiService(this.emojiService);\n    }\n\n    protected emojiPicked(emoji: string): void {\n        this.emojiService.onEmojiPicked.next(emoji);\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from \"rxjs/Subject\";\nimport { NgxEmojiComponent } from \"./ngx-emoji.component\";\n\n@Injectable()\nexport class NgxEmojiService {\n    public readonly onEmojiPicked: Subject<string> = new Subject<string>();\n    protected activeComponent: NgxEmojiComponent;\n\n    public setActiveComponent(component: NgxEmojiComponent): void {\n        this.activeComponent = component;\n    }\n\n    public isActiveComponent(component: NgxEmojiComponent): boolean {\n        return component === this.activeComponent;\n    }\n\n}\n",
    "import { Component, ElementRef, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { NgxEmojiService } from \"./ngx-emoji.service\";\nimport { NgxHtmlConverter } from \"./ngx-html.converter\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nexport interface EnterOn {\n    shift?: boolean;\n    ctrl?: boolean;\n}\n\nexport interface SelectionRange {\n    start: number;\n    stop: number;\n}\n\n@Component({\n    selector: 'ngx-emoji',\n    template: ''\n})\nexport class NgxEmojiComponent {\n    private contenteditable: boolean = false;\n    private enterOn: EnterOn = {\n        shift: false,\n        ctrl: false\n    };\n    protected readonly htmlConverter = new NgxHtmlConverter();\n    protected emojiService: NgxEmojiService;\n    protected globalEmojiServiceSubscription: Subscription;\n    protected lastSelectionRange: SelectionRange = {\n        start: 0,\n        stop: 0\n    };\n\n    public constructor(\n        protected elRef: ElementRef,\n        globalEmojiService: NgxEmojiService\n    ) {\n        let component = this;\n        globalEmojiService.setActiveComponent(this);\n        this.emojiService = globalEmojiService;\n        this.globalEmojiServiceSubscription = this.emojiService.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    public addEmojiService(service: NgxEmojiService): void {\n        if (this.globalEmojiServiceSubscription) {\n            this.globalEmojiServiceSubscription.unsubscribe();\n        }\n        service.setActiveComponent(this);\n        this.emojiService = service;\n        let component = this;\n        service.onEmojiPicked.subscribe(function (emoji: string) {\n            component.insertEmoji(emoji);\n        });\n    }\n\n    @Input('attr.contenteditable')\n    protected set attrContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('contenteditable')\n    protected set inputContenteditable(editable: boolean) {\n        this.setContentEditable(editable);\n    }\n\n    @Input('enterOn')\n    protected set inputEnterOn(enterOn: EnterOn) {\n        this.enterOn = enterOn;\n    }\n\n    @Input('text')\n    protected set inputText(text: string) {\n        this.setText(text);\n    }\n\n    @Output('text')\n    protected readonly onText: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output('enter')\n    protected readonly onEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output('entities')\n    protected readonly onEntities: EventEmitter<void> = new EventEmitter<void>();\n\n    @HostListener(\"keydown.enter\", ['$event'])\n    protected onKeydownEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsEnter()) {\n            this.emitEnter();\n        } else {\n            this.insertNewLine();\n        }\n    }\n\n    @HostListener(\"keydown.control.enter\", ['$event'])\n    protected onKeydownControlEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsCtrlEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"keydown.shift.enter\", ['$event'])\n    protected onKeydownShiftEnter(event: KeyboardEvent): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        event.preventDefault();\n        if (this.enterKeyIsShiftEnter()) {\n            this.emitEnter();\n        }\n    }\n\n    @HostListener(\"focus\")\n    protected onFocus(): void {\n        this.emojiService.setActiveComponent(this);\n    }\n\n    @HostListener(\"focusout\")\n    protected onFocusout(): void {\n        this.lastSelectionRange = this.getSelectionRange();\n    }\n\n    public setContentEditable(editable: boolean): void {\n        /*if (this.contenteditable != editable && editable == true) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.fromHtml(this.elRef.nativeElement.innerHTML);\n        }\n        if (this.contenteditable != editable && editable == false) {\n            this.elRef.nativeElement.innerHTML = this.htmlConverter.toHtml(this.elRef.nativeElement.innerHTML);\n        }*/\n        this.contenteditable = editable;\n        this.elRef.nativeElement.setAttribute('contenteditable', editable);\n    }\n\n    public isContentEditable(): boolean {\n        return this.contenteditable;\n    }\n\n    public enterKeyIsEnter(): boolean {\n        return !this.enterKeyIsShiftEnter() && !this.enterKeyIsCtrlEnter();\n    }\n\n    public enterKeyIsCtrlEnter(): boolean {\n        return (this.enterOn.ctrl) ? true : false;\n    }\n\n    public enterKeyIsShiftEnter(): boolean {\n        return (this.enterOn.shift) ? true : false;\n    }\n\n    public setText(text: string): void {\n        this.elRef.nativeElement.innerHTML = this.htmlConverter.filterHtml(text);\n    }\n\n    public getText(): string {\n        let text = this.elRef.nativeElement.innerHTML;\n        // hotfix to insert new line\n        if (text.substr(text.length - 2) == '\\n\\n') {\n            text = text.substr(0, text.length - 1);\n        }\n        return text;\n    }\n\n    public getNativeElement(): HTMLElement {\n        return this.elRef.nativeElement;\n    }\n\n    protected emitEnter(): void {\n        this.onText.emit(this.getText());\n        this.onEnter.emit();\n        this.elRef.nativeElement.innerHTML = '';\n    }\n\n    protected insertNewLine(): void {\n        this.insertText('\\n');\n    }\n\n    protected insertEmoji(emoji: string): void {\n        if (!this.isContentEditable()) {\n            return;\n        }\n        if (!this.emojiService.isActiveComponent(this)) {\n            return;\n        }\n        this.insertText(' ' + emoji + ' ');\n    }\n\n    protected insertText(text: string): void {\n        let currentText = this.elRef.nativeElement.innerHTML;\n        let selection: SelectionRange;\n        if (document.activeElement === this.elRef.nativeElement) {\n            selection = this.getSelectionRange();\n        } else {\n            selection = this.lastSelectionRange;\n        }\n\n        this.elRef.nativeElement.innerHTML =\n            currentText.substr(0, selection.start)\n            + text\n            + currentText.substr(selection.stop);\n\n        // hotfix to insert new line\n        if (selection.stop == currentText.length && text == '\\n') {\n            this.elRef.nativeElement.innerHTML = this.elRef.nativeElement.innerHTML + '\\n';\n        }\n\n        this.setCaretPosition(selection.start + text.length);\n    }\n\n    protected getSelectionRange(): SelectionRange {\n        let selection = window.getSelection();\n        let start = 0;\n        let stop = 0;\n\n        if (selection.type == 'Caret') {\n            start = selection.extentOffset;\n            stop = selection.extentOffset;\n        }\n        if (selection.type == 'Range') {\n            start = selection.extentOffset;\n            stop = selection.anchorOffset;\n            if (start > stop) {\n                start = selection.anchorOffset;\n                stop = selection.extentOffset;\n            }\n        }\n        return {\n            start: start,\n            stop: stop\n        }\n    }\n\n    protected setCaretPosition(pos: number): void {\n        let selection = window.getSelection();\n        selection.collapse(this.elRef.nativeElement.firstChild, pos);\n    }\n\n}\n",
    "export class NgxHtmlConverter {\n\n    public fromHtml(html: string): string {\n        let text = html.replace('<br>', '\\n');\n        return text;\n    }\n\n    public toHtml(text: string): string {\n        let html = text.replace('\\n', '<br>');\n        return html;\n    }\n\n    public filterHtml(text: string): string {\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = text;\n        text = tmp.textContent || tmp.innerText || \"\";\n        return text;\n    }\n\n}\n"
  ],
  "names": [
    "Subject"
  ],
  "mappings": "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"
}
